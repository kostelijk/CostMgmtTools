name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      managementGroupId:
        required: true
        type: string
      resourceGroupId:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
      faName:
        required: false
        type: string
      laResourceGroup:
        required: true
        type: string
      laName:
        required: true
        type: string
      workspaceId:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  validate:
     runs-on: ubuntu-latest
     steps: 
     - uses: actions/checkout@v3
     - uses: azure/login@v1
       name: Sign in to Azure
       with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     - if: inputs.environmentType != 'Production'
       uses: azure/arm-deploy@v1
       name: Run preflight validation main.bicep
       with:
        scope: subscription
        deploymentName: ${{ github.run_number }}
        subscriptionId: ${{ inputs.subscriptionId }}
        template: ./Deploy/main.bicep
        parameters: >
          resourceGroupName: ${{ inputs.resourceGroupName }}
          appName=${{ inputs.faName }}
          laResourceGroup=${{ inputs.laResourceGroup }}
          laName=${{ inputs.laName }}
          workspaceId=${{ inputs.workspaceId }}
        deploymentMode: Validate
     - if: inputs.environmentType == 'Production'
       uses: azure/arm-deploy@v1
       name: Run what-if main.bicep
       with:
         failOnStdErr: false
         scope: subscription
         subscriptionId: ${{ inputs.subscriptionId }}
         deploymentName: ${{ github.run_number }}
         template: ./Deploy/main.bicep
         parameters: >
            resourceGroupName: ${{ inputs.resourceGroupName }}
            appName=${{ inputs.faName }}
            laResourceGroup=${{ inputs.laResourceGroup }}
            laName=${{ inputs.laName }}
            workspaceId=${{ inputs.workspaceId }}
         additionalArguments: --what-if
 
  deploy:
    needs: validate
#    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      dceURI: ${{ steps.deployBicep.outputs.dceURI }}
      dcrImmutableId: ${{ steps.deployBicep.outputs.dcrImmutableId }}
      functionAppName: ${{ steps.deployBicep.outputs.functionAppName }}
      principalId: ${{ steps.deployBicep.outputs.principalId }}
      publishingProfile: ${{ steps.getPublishingProfile.outputs.publishingProfile}}
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true
    - uses: azure/arm-deploy@v1
      id: deploytableBicep
      name: Deploy table Bicep file
      with:
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ inputs.laResourceGroup }}
        template: ./Deploy/table.bicep
        parameters: >
            laName=${{ inputs.laName }}
    - uses: azure/arm-deploy@v1
      id: deployBicep
      name: Deploy main Bicep file
      with:
        failOnStdErr: false
        scope: subscription
        deploymentName: ${{ github.run_number }}
        subscriptionId: ${{ inputs.subscriptionId }}
        template: ./Deploy/main.bicep
        parameters: >
            resourceGroupName: ${{ inputs.resourceGroupName }}
            appName=${{ inputs.faName }}
            laResourceGroup=${{ inputs.laResourceGroup }}
            laName=${{ inputs.laName }}
            workspaceId=${{ inputs.workspaceId }}
    - uses: azure/arm-deploy@v1
      id: roleAssignement
      name: Assign RBAC Role
      with:
        failOnStdErr: failOnStdErr
        deploymentName: ${{ github.run_number }}
        scope: managementgroup
        managementGroupId: ${{ inputs.managementGroupId }}
        template: ./Deploy/roleassignement.bicep
        parameters: >
          principalType: ServicePrincipal
          principalId: ${{ steps.deployBicep.outputs.principalId }}
          roleDefinitionId: acdd72a7-3385-48ef-bd42-f606fba81ae7
    - name: Run Azure CLI script
      id: getPublishingProfile
      run: |
        echo publishingProfile=$(az webapp deployment list-publishing-profiles --resource-group ${{ inputs.resourceGroupName }} --name ${{ steps.deployBicep.outputs.functionAppName }} --xml) >> $GITHUB_OUTPUT
  deploy-fa:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ needs.deploy.outputs.functionAppName }}
          slot-name: 'Production'
          package: '.' # ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ needs.deploy.outputs.publishingProfile }}